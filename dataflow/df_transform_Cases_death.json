{
	"name": "df_transform_Cases_death",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_Cases_and_deaths_df",
						"type": "DatasetReference"
					},
					"name": "CasesAndDeathSource"
				},
				{
					"dataset": {
						"referenceName": "ds_country_code_lookup",
						"type": "DatasetReference"
					},
					"name": "CountryCodeLookup"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "FilterEuropeOnly"
				},
				{
					"name": "selectOnlyRelevantColumns"
				},
				{
					"name": "pivotCounts"
				},
				{
					"name": "LookupCountryCodes"
				},
				{
					"name": "selectForSink"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          continent as string,",
				"          population as integer,",
				"          indicator as string,",
				"          daily_count as integer,",
				"          date as date,",
				"          rate_14_day as double,",
				"          source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CasesAndDeathSource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CountryCodeLookup",
				"CasesAndDeathSource filter(continent=='Europe'&&not(isNull(country_code))) ~> FilterEuropeOnly",
				"FilterEuropeOnly select(mapColumn(",
				"          country,",
				"          country_code,",
				"          population,",
				"          indicator,",
				"          daily_count,",
				"          reported_date = date,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectOnlyRelevantColumns",
				"selectOnlyRelevantColumns pivot(groupBy(country,",
				"          country_code,",
				"          population,",
				"          source,",
				"          reported_date),",
				"     pivotBy(indicator, ['confirmed cases', 'deaths']),",
				"     count = sum(daily_count),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> pivotCounts",
				"pivotCounts, CountryCodeLookup lookup(pivotCounts@country == CountryCodeLookup@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupCountryCodes",
				"LookupCountryCodes select(mapColumn(",
				"          country = pivotCounts@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          {confirmed cases_count},",
				"          deaths_count,",
				"          population = pivotCounts@population,",
				"          reported_date,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectForSink"
			]
		}
	}
}