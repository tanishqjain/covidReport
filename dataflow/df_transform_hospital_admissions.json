{
	"name": "df_transform_hospital_admissions",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_hospital_and_admission_raw",
						"type": "DatasetReference"
					},
					"name": "HospitalAdmissionsSource"
				},
				{
					"dataset": {
						"referenceName": "ds_country_code_lookup",
						"type": "DatasetReference"
					},
					"name": "CountryCode"
				},
				{
					"dataset": {
						"referenceName": "ds_dim_date_dl",
						"type": "DatasetReference"
					},
					"name": "DimDate"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DailyFile",
						"type": "DatasetReference"
					},
					"name": "DailySink"
				}
			],
			"transformations": [
				{
					"name": "SelectRelevantFields"
				},
				{
					"name": "CountryCodeLookup"
				},
				{
					"name": "RemoveunwantedFields"
				},
				{
					"name": "StreamSplit"
				},
				{
					"name": "DeriveYearDateColumn"
				},
				{
					"name": "dimDateAggregate"
				},
				{
					"name": "joinWeeklyDimDate"
				},
				{
					"name": "DailyPivot1"
				},
				{
					"name": "WeeklyPivot"
				},
				{
					"name": "SortDaily"
				},
				{
					"name": "SortWeekly"
				},
				{
					"name": "DailySelectForSink"
				},
				{
					"name": "WeeklySelectForSink"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> HospitalAdmissionsSource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CountryCode",
				"source(output(",
				"          date_key as integer,",
				"          date as date,",
				"          year as short,",
				"          month as short,",
				"          day as short,",
				"          day_name as string,",
				"          day_of_year as short,",
				"          week_of_month as short,",
				"          week_of_year as short,",
				"          month_name as string,",
				"          year_month as integer,",
				"          year_week as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DimDate",
				"HospitalAdmissionsSource select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reported_date = date,",
				"          reported_year_week = year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectRelevantFields",
				"SelectRelevantFields, CountryCode lookup(SelectRelevantFields@country == CountryCode@country,",
				"     multiple: true,",
				"     broadcast: 'auto')~> CountryCodeLookup",
				"CountryCodeLookup select(mapColumn(",
				"          country = SelectRelevantFields@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          indicator,",
				"          reported_date,",
				"          reported_year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveunwantedFields",
				"RemoveunwantedFields split(indicator=='Daily hospital occupancy'||indicator=='Daily ICU occupancy',",
				"     disjoint: false) ~> StreamSplit@(DailyData, WeeklyData)",
				"DimDate derive(ecdc_year_week = toString(year)+'-W'+lpad(toString(week_of_year) , 2, '0')) ~> DeriveYearDateColumn",
				"DeriveYearDateColumn aggregate(groupBy(ecdc_year_week),",
				"     week_start_date = min(date),",
				"          week_end_date = max(date)) ~> dimDateAggregate",
				"StreamSplit@WeeklyData, dimDateAggregate join(reported_year_week == ecdc_year_week,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinWeeklyDimDate",
				"StreamSplit@DailyData pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          source),",
				"     pivotBy(indicator, ['Daily ICU occupancy', 'Daily hospital occupancy']),",
				"     count = sum(value),",
				"     columnNaming: '$N_$V',",
				"     lateral: false) ~> DailyPivot1",
				"joinWeeklyDimDate pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_year_week,",
				"          week_start_date,",
				"          week_end_date,",
				"          source),",
				"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
				"     count = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> WeeklyPivot",
				"DailyPivot1 sort(desc(reported_date, true),",
				"     asc(country, true)) ~> SortDaily",
				"WeeklyPivot sort(desc(reported_year_week, true),",
				"     asc(country, true)) ~> SortWeekly",
				"SortDaily select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          hospital_occupancy_count = {count_Daily hospital occupancy},",
				"          icu_occupancy_count = {count_Daily ICU occupancy},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DailySelectForSink",
				"SortWeekly select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_year_week,",
				"          reported_week_start_date = week_start_date,",
				"          reported_week_end_date = week_end_date,",
				"          new_hopital_occupancy_count = {Weekly new hospital admissions per 100k_count},",
				"          new_icu_occupancy_count = {Weekly new ICU admissions per 100k_count},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> WeeklySelectForSink",
				"DailySelectForSink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          {confirmed cases_count} as string,",
				"          deaths_count as string,",
				"          population as string,",
				"          reported_date as string,",
				"          source as string",
				"     ),",
				"     partitionFileNames:['Daily_File.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DailySink"
			]
		}
	}
}