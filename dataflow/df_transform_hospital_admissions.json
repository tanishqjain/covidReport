{
	"name": "df_transform_hospital_admissions",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_hospital_and_admission_raw",
						"type": "DatasetReference"
					},
					"name": "HospitalAdmissionsSource"
				},
				{
					"dataset": {
						"referenceName": "ds_country_code_lookup",
						"type": "DatasetReference"
					},
					"name": "CountryCode"
				},
				{
					"dataset": {
						"referenceName": "ds_dim_date_dl",
						"type": "DatasetReference"
					},
					"name": "DimDate"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "SelectRelevantFields"
				},
				{
					"name": "CountryCodeLookup"
				},
				{
					"name": "RemoveunwantedFields"
				},
				{
					"name": "StreamSplit"
				},
				{
					"name": "DeriveYearDateColumn"
				},
				{
					"name": "dimDateAggregate"
				},
				{
					"name": "joinWeeklyDimDate"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> HospitalAdmissionsSource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CountryCode",
				"source(output(",
				"          date_key as integer,",
				"          date as date,",
				"          year as short,",
				"          month as short,",
				"          day as short,",
				"          day_name as string,",
				"          day_of_year as short,",
				"          week_of_month as short,",
				"          week_of_year as short,",
				"          month_name as string,",
				"          year_month as integer,",
				"          year_week as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DimDate",
				"HospitalAdmissionsSource select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reported_date = date,",
				"          reported_year_week = year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectRelevantFields",
				"SelectRelevantFields, CountryCode lookup(SelectRelevantFields@country == CountryCode@country,",
				"     multiple: true,",
				"     broadcast: 'auto')~> CountryCodeLookup",
				"CountryCodeLookup select(mapColumn(",
				"          country = SelectRelevantFields@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          indicator,",
				"          reported_date,",
				"          reported_year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveunwantedFields",
				"RemoveunwantedFields split(indicator=='Daily hospital occupancy'||indicator=='Daily ICU occupancy',",
				"     disjoint: false) ~> StreamSplit@(DailyData, WeeklyData)",
				"DimDate derive(ecdc_year_week = toString(year)+'-W'+lpad(toString(week_of_year) , 2, '0')) ~> DeriveYearDateColumn",
				"DeriveYearDateColumn aggregate(groupBy(ecdc_year_week),",
				"     week_start_date = min(date),",
				"          week_end_date = max(date)) ~> dimDateAggregate",
				"StreamSplit@WeeklyData, dimDateAggregate join(reported_year_week == ecdc_year_week,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinWeeklyDimDate"
			]
		}
	}
}